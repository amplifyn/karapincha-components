/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface KpAvatar {
    'alt': string;
    'img': string;
    'isDefault': boolean;
    'isLarge': boolean;
    'isMedium': boolean;
    'isSmall': boolean;
    'name': string;
  }
  interface KpAvatarGroup {}
  interface KpButton {
    'btnId': string;
    'isDefault': boolean;
    'isDisabled': boolean;
    'isLarge': boolean;
    'isLoading': boolean;
    'text': string;
  }
  interface KpColorChip {
    'color': string;
  }
  interface KpColorRibbon {
    'colorHex': string;
    'colorName': string;
    'colorRgb': string;
    'colorWeight': string;
    'isCard': boolean;
  }
  interface KpDataRibbon {
    'dataAvatarUrl': string;
    'dataHeading': string;
  }
  interface KpFab {
    'dataIconName': string;
    'isDisabled': boolean;
    'isLoading': boolean;
  }
  interface KpInputField {
    'fieldId': string;
    'fieldName': string;
    'fieldType': string;
    'isError': boolean;
    'placeholderText': string;
  }
  interface KpInputGroup {}
  interface KpLabel {
    'isError': boolean;
    'labelFor': string;
    'labelText': string;
  }
  interface KpLogo {
    'imageAlt': string;
    'imageSrc': string;
    'isDefault': boolean;
    'isLarge': boolean;
    'isSmall': boolean;
  }
  interface KpSpiner {}
  interface PlaceholderColorRibbon {}
}

declare global {


  interface HTMLKpAvatarElement extends Components.KpAvatar, HTMLStencilElement {}
  const HTMLKpAvatarElement: {
    prototype: HTMLKpAvatarElement;
    new (): HTMLKpAvatarElement;
  };

  interface HTMLKpAvatarGroupElement extends Components.KpAvatarGroup, HTMLStencilElement {}
  const HTMLKpAvatarGroupElement: {
    prototype: HTMLKpAvatarGroupElement;
    new (): HTMLKpAvatarGroupElement;
  };

  interface HTMLKpButtonElement extends Components.KpButton, HTMLStencilElement {}
  const HTMLKpButtonElement: {
    prototype: HTMLKpButtonElement;
    new (): HTMLKpButtonElement;
  };

  interface HTMLKpColorChipElement extends Components.KpColorChip, HTMLStencilElement {}
  const HTMLKpColorChipElement: {
    prototype: HTMLKpColorChipElement;
    new (): HTMLKpColorChipElement;
  };

  interface HTMLKpColorRibbonElement extends Components.KpColorRibbon, HTMLStencilElement {}
  const HTMLKpColorRibbonElement: {
    prototype: HTMLKpColorRibbonElement;
    new (): HTMLKpColorRibbonElement;
  };

  interface HTMLKpDataRibbonElement extends Components.KpDataRibbon, HTMLStencilElement {}
  const HTMLKpDataRibbonElement: {
    prototype: HTMLKpDataRibbonElement;
    new (): HTMLKpDataRibbonElement;
  };

  interface HTMLKpFabElement extends Components.KpFab, HTMLStencilElement {}
  const HTMLKpFabElement: {
    prototype: HTMLKpFabElement;
    new (): HTMLKpFabElement;
  };

  interface HTMLKpInputFieldElement extends Components.KpInputField, HTMLStencilElement {}
  const HTMLKpInputFieldElement: {
    prototype: HTMLKpInputFieldElement;
    new (): HTMLKpInputFieldElement;
  };

  interface HTMLKpInputGroupElement extends Components.KpInputGroup, HTMLStencilElement {}
  const HTMLKpInputGroupElement: {
    prototype: HTMLKpInputGroupElement;
    new (): HTMLKpInputGroupElement;
  };

  interface HTMLKpLabelElement extends Components.KpLabel, HTMLStencilElement {}
  const HTMLKpLabelElement: {
    prototype: HTMLKpLabelElement;
    new (): HTMLKpLabelElement;
  };

  interface HTMLKpLogoElement extends Components.KpLogo, HTMLStencilElement {}
  const HTMLKpLogoElement: {
    prototype: HTMLKpLogoElement;
    new (): HTMLKpLogoElement;
  };

  interface HTMLKpSpinerElement extends Components.KpSpiner, HTMLStencilElement {}
  const HTMLKpSpinerElement: {
    prototype: HTMLKpSpinerElement;
    new (): HTMLKpSpinerElement;
  };

  interface HTMLPlaceholderColorRibbonElement extends Components.PlaceholderColorRibbon, HTMLStencilElement {}
  const HTMLPlaceholderColorRibbonElement: {
    prototype: HTMLPlaceholderColorRibbonElement;
    new (): HTMLPlaceholderColorRibbonElement;
  };
  interface HTMLElementTagNameMap {
    'kp-avatar': HTMLKpAvatarElement;
    'kp-avatar-group': HTMLKpAvatarGroupElement;
    'kp-button': HTMLKpButtonElement;
    'kp-color-chip': HTMLKpColorChipElement;
    'kp-color-ribbon': HTMLKpColorRibbonElement;
    'kp-data-ribbon': HTMLKpDataRibbonElement;
    'kp-fab': HTMLKpFabElement;
    'kp-input-field': HTMLKpInputFieldElement;
    'kp-input-group': HTMLKpInputGroupElement;
    'kp-label': HTMLKpLabelElement;
    'kp-logo': HTMLKpLogoElement;
    'kp-spiner': HTMLKpSpinerElement;
    'placeholder-color-ribbon': HTMLPlaceholderColorRibbonElement;
  }
}

declare namespace LocalJSX {
  interface KpAvatar {
    'alt'?: string;
    'img'?: string;
    'isDefault'?: boolean;
    'isLarge'?: boolean;
    'isMedium'?: boolean;
    'isSmall'?: boolean;
    'name'?: string;
  }
  interface KpAvatarGroup {}
  interface KpButton {
    'btnId'?: string;
    'isDefault'?: boolean;
    'isDisabled'?: boolean;
    'isLarge'?: boolean;
    'isLoading'?: boolean;
    'text'?: string;
  }
  interface KpColorChip {
    'color'?: string;
  }
  interface KpColorRibbon {
    'colorHex'?: string;
    'colorName'?: string;
    'colorRgb'?: string;
    'colorWeight'?: string;
    'isCard'?: boolean;
  }
  interface KpDataRibbon {
    'dataAvatarUrl'?: string;
    'dataHeading'?: string;
  }
  interface KpFab {
    'dataIconName'?: string;
    'isDisabled'?: boolean;
    'isLoading'?: boolean;
  }
  interface KpInputField {
    'fieldId'?: string;
    'fieldName'?: string;
    'fieldType'?: string;
    'isError'?: boolean;
    'placeholderText'?: string;
  }
  interface KpInputGroup {}
  interface KpLabel {
    'isError'?: boolean;
    'labelFor'?: string;
    'labelText'?: string;
  }
  interface KpLogo {
    'imageAlt'?: string;
    'imageSrc'?: string;
    'isDefault'?: boolean;
    'isLarge'?: boolean;
    'isSmall'?: boolean;
  }
  interface KpSpiner {}
  interface PlaceholderColorRibbon {}

  interface IntrinsicElements {
    'kp-avatar': KpAvatar;
    'kp-avatar-group': KpAvatarGroup;
    'kp-button': KpButton;
    'kp-color-chip': KpColorChip;
    'kp-color-ribbon': KpColorRibbon;
    'kp-data-ribbon': KpDataRibbon;
    'kp-fab': KpFab;
    'kp-input-field': KpInputField;
    'kp-input-group': KpInputGroup;
    'kp-label': KpLabel;
    'kp-logo': KpLogo;
    'kp-spiner': KpSpiner;
    'placeholder-color-ribbon': PlaceholderColorRibbon;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'kp-avatar': LocalJSX.KpAvatar & JSXBase.HTMLAttributes<HTMLKpAvatarElement>;
      'kp-avatar-group': LocalJSX.KpAvatarGroup & JSXBase.HTMLAttributes<HTMLKpAvatarGroupElement>;
      'kp-button': LocalJSX.KpButton & JSXBase.HTMLAttributes<HTMLKpButtonElement>;
      'kp-color-chip': LocalJSX.KpColorChip & JSXBase.HTMLAttributes<HTMLKpColorChipElement>;
      'kp-color-ribbon': LocalJSX.KpColorRibbon & JSXBase.HTMLAttributes<HTMLKpColorRibbonElement>;
      'kp-data-ribbon': LocalJSX.KpDataRibbon & JSXBase.HTMLAttributes<HTMLKpDataRibbonElement>;
      'kp-fab': LocalJSX.KpFab & JSXBase.HTMLAttributes<HTMLKpFabElement>;
      'kp-input-field': LocalJSX.KpInputField & JSXBase.HTMLAttributes<HTMLKpInputFieldElement>;
      'kp-input-group': LocalJSX.KpInputGroup & JSXBase.HTMLAttributes<HTMLKpInputGroupElement>;
      'kp-label': LocalJSX.KpLabel & JSXBase.HTMLAttributes<HTMLKpLabelElement>;
      'kp-logo': LocalJSX.KpLogo & JSXBase.HTMLAttributes<HTMLKpLogoElement>;
      'kp-spiner': LocalJSX.KpSpiner & JSXBase.HTMLAttributes<HTMLKpSpinerElement>;
      'placeholder-color-ribbon': LocalJSX.PlaceholderColorRibbon & JSXBase.HTMLAttributes<HTMLPlaceholderColorRibbonElement>;
    }
  }
}


